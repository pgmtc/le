// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pgmtc/le/pkg/common (interfaces: Marshaller)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMarshaller is a mock of Marshaller interface
type MockMarshaller struct {
	ctrl     *gomock.Controller
	recorder *MockMarshallerMockRecorder
}

// MockMarshallerMockRecorder is the mock recorder for MockMarshaller
type MockMarshallerMockRecorder struct {
	mock *MockMarshaller
}

// NewMockMarshaller creates a new mock instance
func NewMockMarshaller(ctrl *gomock.Controller) *MockMarshaller {
	mock := &MockMarshaller{ctrl: ctrl}
	mock.recorder = &MockMarshallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMarshaller) EXPECT() *MockMarshallerMockRecorder {
	return m.recorder
}

// Marshall mocks base method
func (m *MockMarshaller) Marshall(arg0 interface{}, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshall", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Marshall indicates an expected call of Marshall
func (mr *MockMarshallerMockRecorder) Marshall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshall", reflect.TypeOf((*MockMarshaller)(nil).Marshall), arg0, arg1)
}

// Unmarshall mocks base method
func (m *MockMarshaller) Unmarshall(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshall", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshall indicates an expected call of Unmarshall
func (mr *MockMarshallerMockRecorder) Unmarshall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshall", reflect.TypeOf((*MockMarshaller)(nil).Unmarshall), arg0, arg1)
}
