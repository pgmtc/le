// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pgmtc/le/pkg/common (interfaces: FsHandler)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	os "os"
	reflect "reflect"
)

// MockFsHandler is a mock of FsHandler interface
type MockFsHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFsHandlerMockRecorder
}

// MockFsHandlerMockRecorder is the mock recorder for MockFsHandler
type MockFsHandlerMockRecorder struct {
	mock *MockFsHandler
}

// NewMockFsHandler creates a new mock instance
func NewMockFsHandler(ctrl *gomock.Controller) *MockFsHandler {
	mock := &MockFsHandler{ctrl: ctrl}
	mock.recorder = &MockFsHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFsHandler) EXPECT() *MockFsHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockFsHandler) Create(arg0 string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockFsHandlerMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFsHandler)(nil).Create), arg0)
}

// MkdirAll mocks base method
func (m *MockFsHandler) MkdirAll(arg0 string, arg1 os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll
func (mr *MockFsHandlerMockRecorder) MkdirAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockFsHandler)(nil).MkdirAll), arg0, arg1)
}

// Stat mocks base method
func (m *MockFsHandler) Stat(arg0 string) (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", arg0)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat
func (mr *MockFsHandlerMockRecorder) Stat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockFsHandler)(nil).Stat), arg0)
}
